#include <stdio.h>
#include <ctype.h>

// Function to check if a number is coprime with 26 (the size of the English alphabet)
int isCoprime(int a) {
    for (int i = 2; i < 26; i++) {
        if ((a % i == 0) && (26 % i == 0)) {
            return 0; // Not coprime
        }
    }
    return 1; // Coprime
}

// Function to find the modular multiplicative inverse of a number
int modInverse(int a) {
    for (int i = 1; i < 26; i++) {
        if ((a * i) % 26 == 1) {
            return i;
        }
    }
    return -1; // Inverse does not exist
}

// Function to encrypt using the Affine Cipher
char encryptAffine(char ch, int a, int b) {
    if (isalpha(ch)) {
        char encrypted;
        if (islower(ch)) {
            encrypted = (a * (ch - 'a') + b) % 26 + 'a';
        } else {
            encrypted = (a * (ch - 'A') + b) % 26 + 'A';
        }
        return encrypted;
    } else {
        return ch;
    }
}

// Function to decrypt using the Affine Cipher
char decryptAffine(char ch, int a, int b) {
    if (isalpha(ch)) {
        char decrypted;
        if (islower(ch)) {
            decrypted = (modInverse(a) * (ch - 'a' - b + 26)) % 26 + 'a';
        } else {
            decrypted = (modInverse(a) * (ch - 'A' - b + 26)) % 26 + 'A';
        }
        return decrypted;
    } else {
        return ch;
    }
}

int main() {
    int a, b;

    // Get key values 'a' and 'b' from the user
    printf("Enter the value of 'a' (must be coprime with 26): ");
    scanf("%d", &a);

    if (!isCoprime(a)) {
        printf("Error: 'a' must be coprime with 26.\n");
        return 1;
    }

    printf("Enter the value of 'b': ");
    scanf("%d", &b);

    // Encryption
    char plaintext[100];
    printf("Enter the plaintext: ");
    scanf(" %[^\n]s", plaintext);

    printf("Encrypted text: ");
    for (int i = 0; plaintext[i] != '\0'; i++) {
        printf("%c", encryptAffine(plaintext[i], a, b));
    }
    printf("\n");

    // Decryption
    printf("Decrypted text: ");
    for (int i = 0; plaintext[i] != '\0'; i++) {
        printf("%c", decryptAffine(encryptAffine(plaintext[i], a, b), a, b));
    }
    printf("\n");

    return 0;
}
